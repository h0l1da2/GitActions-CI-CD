name: CI

# master branch 에 push / PR 이 일어날 때를 트리거로 하여 해당 build event 발생
on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop", "master" ]

jobs:
  # 작업 이름 build 정의
  build:
    # ubuntu 최신 이미지 위에서 실행
    runs-on: ubuntu-latest
    # 깃허브의 해당 작업에 대한 권한 범위
    permissions:
      # 해당 커밋에 대한 "읽기" 권한 있음.
      contents: read

    # 빌드 작업의 단계들.. '-' 가 Step 1, 2, 3 으로 관리될거임
    steps:
      # 레포로 체크아웃
      - uses: actions/checkout@v4
      # jdk 17 세팅 작업이라고 이름을 지정하고, uses 를 사용해 setup-java 함
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          # 궁금해서 찾아봤는데 JDK 이미지가 저장된 저장소 이름임..
          distribution: 'temurin'

      # Gradle 세팅, 아래 링크에 액션의 자세한 내용이 담겨있다.
      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      # build 명령
      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # 아티팩트 업로드
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: build/libs/*.jar

  deploy:
    needs: build

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: build/libs
      - run: ls -R build/libs

      - name: Upload to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa build/libs/artifact/*.jar $EC2_USER@$EC2_HOST:~/my-project

      - name: Deploy Artifact
        uses: appleboy/ssh-action@v1.0.3
        env:
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
        # GITHUB_RUN_NUMBER -> 리포지토리에 있는 특정 워크플로의 실행마다 고유한 숫자입니다. 이 숫자는 워크플로의 첫 실행 시 1부터 시작하며 새 실행마다 증가합니다. 워크플로 실행을 다시 실행하는 경우 이 숫자는 변경되지 않습니다.(예시: 3)
          script: |
            docker build -t cicd_app:v1.0.$GITHUB_RUN_NUMBER ~/my-project/.
            docker stop cicd_app
            docker run -d --name cicd_app -p 8000:8000 cicd_app:v1.0.$GITHUB_RUN_NUMBER